{"remainingRequest":"/home/skhm/web_client/client_test/node_modules/babel-loader/lib/index.js!/home/skhm/web_client/client_test/node_modules/vuetify-loader/lib/loader.js!/home/skhm/web_client/client_test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/skhm/web_client/client_test/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/skhm/web_client/client_test/src/components/WLsetting.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/skhm/web_client/client_test/src/components/WLsetting.vue","mtime":1563180614951},{"path":"/home/skhm/web_client/client_test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/skhm/web_client/client_test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/skhm/web_client/client_test/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/skhm/web_client/client_test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/skhm/web_client/client_test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport WLsettingBox from './WLsettingBox.vue';\nexport default {\n  components: {\n    WLsettingBox: WLsettingBox\n  },\n  data: function data() {\n    return {\n      settingBoxSeen: false,\n      selected: [],\n      show: false,\n      dialog: false,\n      headers: [{\n        text: '파일명',\n        align: 'center',\n        sortable: false,\n        value: 'name',\n        width: '20%'\n      }, {\n        text: '연산비율(R/U/I/S/RMW)',\n        align: 'center',\n        sortable: false,\n        value: 'operationRatio',\n        width: '10%'\n      }, {\n        text: '생성일',\n        align: 'center',\n        value: 'date',\n        width: '20%'\n      }, {\n        text: '사용빈도',\n        align: 'center',\n        value: 'frequency',\n        width: '5%'\n      }, {\n        text: '',\n        align: 'center',\n        sortable: false,\n        value: 'name',\n        width: '20%'\n      }],\n      editedIndex: -1,\n      pagination: {\n        sortBy: 'date'\n      }\n    };\n  },\n  created: function created() {\n    this.$store.dispatch('getWLfiles'); //(1). store에 정의된 함수가 실행되면서 서버에서 워크로드 데이터 가져옴.\n\n    this.pagination.descending = true;\n  },\n  computed: {\n    getWLfilesFilter: function getWLfilesFilter() {\n      //(2). WLfiles[]의 state을 가져와서 워크로드 테이블과 연결하는 함수\n      // console.log(this.$store.state.WLfiles);\n      return this.$store.state.WLfilesFilter;\n    }\n  },\n  methods: {\n    showLoading: function showLoading() {\n      this.$store.commit('setIsLoading', true);\n    },\n    clearSelect: function clearSelect() {\n      var self = this;\n      this.settingBoxSeen = false;\n      this.$store.commit('setIsActive', -1);\n      setTimeout(function () {\n        self.$store.commit('setSelectedWorkload', {});\n      }, 200);\n    },\n    customSort: function customSort(items, index, isDescending) {\n      items.sort(function (a, b) {\n        if (index === 'w_freq_count') {\n          if (isDescending) {\n            return b.w_freq_count - a.w_freq_count;\n          } else {\n            return a.w_freq_count - b.w_freq_count;\n          }\n        } else {\n          if (isDescending) {\n            return new Date(b.w_c_timestamp) - new Date(a.w_c_timestamp);\n          } else {\n            return new Date(a.w_c_timestamp) - new Date(b.w_c_timestamp);\n          }\n        }\n      });\n      return items;\n    },\n    deleteWorkload: function deleteWorkload(wId) {\n      if (confirm('정말로 삭제하시겠습니까?(삭제된 파일은 복원할 수 없습니다.)')) {\n        // console.log(wId)\n        if (this.$store.state.selectedWorkload.w_id == wId) {\n          this.settingBoxSeen = false;\n        }\n\n        this.showLoading();\n        this.$store.dispatch('deleteWorkload', wId);\n      }\n    },\n    copy: function copy(wId) {\n      //flag 2 = copy\n      this.showLoading();\n      this.$store.dispatch('modifyWorkload', {\n        w_id: wId,\n        modifyFlag: 2\n      });\n    },\n    onSelect: function onSelect(wId) {\n      var _this = this;\n\n      //테이블 row 클릭 시 배경색깔 변하는 함수\n      //보이게 하는거\n      if (this.$store.state.selectedWorkload.w_id == wId) {\n        this.$refs.tab_right.onSelect();\n        return;\n      }\n\n      this.showLoading();\n      if (this.settingBoxSeen) this.settingBoxSeen = false; //색깔 바꾸는거\n\n      this.$store.commit('setIsActive', wId); //[1]. selected_WLfil을 서버에서 가져오는 함수 정의\n\n      this.$store.dispatch('getSelectedWorkload', wId).then(function (res) {\n        if (res.status == 200) {\n          _this.settingBoxSeen = true;\n\n          _this.$refs.tab_right.onSelect();\n        } // console.log(this.$store.state.selectedWorkload);\n\n      });\n    },\n    //워크로드 생성 dialog 켜짐\n    onDialog: function onDialog() {\n      // console.log(\"copy\");\n      this.$store.commit('setInsertWorkload');\n      if (this.settingBoxSeen) this.clearSelect();\n      this.dialog = true;\n      this.$refs.tab_dlg.onSelect();\n    },\n    //워크로드 생성 dialog cancel버튼\n    onCancel: function onCancel(isDialog) {\n      if (isDialog) this.dialog = false;else this.clearSelect();\n    },\n    onSave: function onSave(isDialog) {\n      var _this2 = this;\n\n      //insert\n      if (isDialog) {\n        this.showLoading(); //0 : insert\n\n        this.$store.dispatch('modifyWorkload', {\n          modifyFlag: 0\n        }).then(function (res) {\n          if (res.status == 200) {\n            _this2.dialog = false;\n          }\n        });\n      } else {\n        //1: update\n        this.$store.dispatch('modifyWorkload', {\n          modifyFlag: 1\n        }); // this.$store.commit('setWLdatasize', datasize)\n      }\n    }\n  } //method 닫히는 곳\n  //export default 닫히는 곳\n\n};",{"version":3,"sources":["WLsetting.vue"],"names":[],"mappings":"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","sourcesContent":["<template lang=\"html\">\n    <v-container fluid align-start ma-2 pa-5>\n      <v-layout row wrap justify-space-around fill-height>\n        <!--워크로드 목록-->\n        <v-flex xs12 sm7 md7 xl7>\n          <v-toolbar flat color=\"grey lighten-2\">\n            <v-toolbar-title>\n              <h3>Workloads List</h3>\n            </v-toolbar-title>\n            <v-spacer></v-spacer>\n            <!--워크로드 생성 dialog-->\n            <v-tooltip top>\n              <v-btn color=\"#34495E\" dark round class=\"mb-2\" fab small @click=\"onDialog\" slot=\"activator\">\n                <v-icon>add</v-icon>\n                </v-btn>\n              <span>워크로드 생성</span>\n            </v-tooltip>\n\n            <v-dialog v-model=\"dialog\" max-width=\"500px\" persistent>\n              <WLsettingBox ref=\"tab_dlg\" :settingBoxSeen=\"true\" :isDialog=\"true\" v-on:emitCancel=\"onCancel\" v-on:emitSave=\"onSave\"></WLsettingBox>\n            </v-dialog>\n            <!--/워크로드 생성 dialog-->\n          </v-toolbar>\n\n          <!--워크로드 목록 데이터 테이블-->\n          <v-data-table v-model=\"selected\"\n                        :headers=\"headers\"\n                        :items=\"getWLfilesFilter\"\n                        :custom-sort=\"customSort\"\n                        :must-sort=\"true\"\n                        class=\"elevation-1\"\n                        :pagination.sync=\"pagination\"\n                      >  <!--items와 computed에서 정의한 함수를 바인딩하여 WLfiles[]를 표현-->\n            <template v-slot:items=\"props\">\n                <tr :active=\"props.item.isActive\" :key=\"props.item.w_id\">\n                  <td @click=\"onSelect(props.item.w_id)\" class=\"text-xs-center hover\">{{ props.item.w_name }}</td>\n                  <td @click=\"onSelect(props.item.w_id)\" class=\"text-xs-center hover\">{{ props.item.w_read+\"/\"+props.item.w_update+\"/\"+props.item.w_insert+\"/\"+props.item.w_scan +\"/\"+props.item.w_readmodifywrite }}</td>\n                  <td @click=\"onSelect(props.item.w_id)\" class=\"text-xs-center hover\">{{ props.item.w_c_timestamp}}</td>\n                  <td @click=\"onSelect(props.item.w_id)\" class=\"text-xs-center hover\">{{ props.item.w_freq_count}}</td>\n                  <td class=\"text-xs-center\">\n                    <v-layout align-center justify-center row wrap>\n                      <v-flex xs4>\n                        <v-tooltip top>\n                          <v-icon slot=\"activator\" @click=\"copy(props.item.w_id)\" color=\"#848484\">file_copy</v-icon>\n                          <span>Copy</span>\n                        </v-tooltip>\n                      </v-flex>\n                      <v-flex xs4>\n                        <v-tooltip top>\n                          <v-icon slot=\"activator\" @click=\"deleteWorkload(props.item.w_id)\" color=\"#848484\">delete</v-icon>\n                          <span>Delete</span>\n                        </v-tooltip>\n                      </v-flex>\n                      <v-spacer></v-spacer>\n                    </v-layout>\n                  </td>\n                </tr>\n              </template>\n          </v-data-table>\n          <!--/데이터 테이블-->\n        </v-flex>\n\n        <!--워크로드 설정-->\n        <v-flex xs12 sm4 md4 xl4>\n          <WLsettingBox ref=\"tab_right\" :settingBoxSeen=\"settingBoxSeen\" :isDialog=\"false\" v-on:emitCancel=\"onCancel\" v-on:emitSave=\"onSave\"></WLsettingBox>\n          <!--WLsettingBox.vue -->\n        </v-flex>\n        <!--/워크로드 설정-->\n\n      </v-layout>\n    </v-container>\n</template>\n\n\n<script>\n\n  import WLsettingBox from './WLsettingBox.vue'\n\n  export default {\n    components: {\n      WLsettingBox\n    },\n    data: () => ({\n      settingBoxSeen: false,\n      selected: [],\n      show: false,\n      dialog: false,\n      headers: [\n        { text: '파일명', align: 'center', sortable: false, value: 'name', width: '20%' },\n        { text: '연산비율(R/U/I/S/RMW)', align: 'center', sortable: false, value: 'operationRatio', width: '10%' },\n        { text: '생성일', align: 'center', value: 'date', width: '20%' },\n        { text: '사용빈도', align: 'center', value: 'frequency', width: '5%' },\n        { text: '', align: 'center', sortable: false, value: 'name', width: '20%' }\n      ],\n      editedIndex: -1,\n      pagination : {\n        sortBy : 'date',\n      },\n    }),\n\n\n      created() {\n      this.$store.dispatch('getWLfiles') //(1). store에 정의된 함수가 실행되면서 서버에서 워크로드 데이터 가져옴.\n      this.pagination.descending = true\n    },\n\n\n    computed: {\n      getWLfilesFilter() {\n        //(2). WLfiles[]의 state을 가져와서 워크로드 테이블과 연결하는 함수\n        // console.log(this.$store.state.WLfiles);\n        return this.$store.state.WLfilesFilter\n\n      }\n    },\n    methods: {\n      showLoading(){\n          this.$store.commit('setIsLoading', true)\n      },\n      clearSelect(){\n        let self = this\n        this.settingBoxSeen = false\n        this.$store.commit('setIsActive', -1)\n\n        setTimeout(function() {\n          self.$store.commit('setSelectedWorkload', {})\n        },200)\n\n      },\n      customSort(items, index, isDescending) {\n        items.sort((a, b) => {\n          if (index === 'w_freq_count') {\n            if (isDescending) {\n              return b.w_freq_count - a.w_freq_count\n            } else {\n              return a.w_freq_count - b.w_freq_count\n            }\n          } else {\n            if (isDescending) {\n              return new Date(b.w_c_timestamp) - new Date(a.w_c_timestamp)\n            } else {\n              return new Date(a.w_c_timestamp) - new Date(b.w_c_timestamp)\n            }\n          }\n        })\n        return items\n      },\n      deleteWorkload(wId) {\n\n        if(confirm('정말로 삭제하시겠습니까?(삭제된 파일은 복원할 수 없습니다.)')){\n            // console.log(wId)\n            if(this.$store.state.selectedWorkload.w_id == wId){\n              this.settingBoxSeen = false\n            }\n            this.showLoading()\n            this.$store.dispatch('deleteWorkload', wId)\n\n        }\n      },\n\n      copy(wId) {\n        //flag 2 = copy\n        this.showLoading()\n        this.$store.dispatch('modifyWorkload', { w_id: wId, modifyFlag : 2})\n      },\n\n      onSelect(wId) {\n        //테이블 row 클릭 시 배경색깔 변하는 함수\n        //보이게 하는거\n\n        if(this.$store.state.selectedWorkload.w_id == wId){\n          this.$refs.tab_right.onSelect()\n          return\n        }\n        this.showLoading()\n        if (this.settingBoxSeen)\n          this.settingBoxSeen = false\n\n        //색깔 바꾸는거\n        this.$store.commit('setIsActive', wId)\n        //[1]. selected_WLfil을 서버에서 가져오는 함수 정의\n        this.$store.dispatch('getSelectedWorkload', wId).then((res)=>{\n          if(res.status == 200){\n            this.settingBoxSeen = true\n            this.$refs.tab_right.onSelect()\n          }\n          // console.log(this.$store.state.selectedWorkload);\n        })\n      },\n\n      //워크로드 생성 dialog 켜짐\n      onDialog() {\n        // console.log(\"copy\");\n        this.$store.commit('setInsertWorkload')\n        if(this.settingBoxSeen)\n          this.clearSelect()\n        this.dialog = true\n        this.$refs.tab_dlg.onSelect()\n\n      },\n\n      //워크로드 생성 dialog cancel버튼\n      onCancel(isDialog) {\n        if (isDialog) this.dialog = false\n        else          this.clearSelect()\n      },\n\n      onSave(isDialog){\n          //insert\n          if(isDialog){\n            this.showLoading()\n            //0 : insert\n            this.$store.dispatch('modifyWorkload', {modifyFlag : 0}).then((res)=>{\n              if(res.status == 200){\n                this.dialog = false\n              }\n            })\n          }else{  //1: update\n            this.$store.dispatch('modifyWorkload', {modifyFlag : 1})\n            // this.$store.commit('setWLdatasize', datasize)\n          }\n\n      }\n    } //method 닫히는 곳\n  } //export default 닫히는 곳\n\n</script>\n\n<style lang=\"css\" scoped>\n\n  table.v-table tbody tr td {\n    font-size: 16px;\n  }\n  table.v-table th {\n\n    font-size: 16px;\n  }\n  .hover {\n    cursor  : pointer;\n  }\n\n</style>\n"],"sourceRoot":"src/components"}]}